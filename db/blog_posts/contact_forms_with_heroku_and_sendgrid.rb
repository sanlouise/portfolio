user = User.first

user.blogs.create!(
  title: "Contact Forms with Heroku and Sendgrid",
  body: "<p>It can be quite simple to create a contact form in Rails. In this post, I will assume that you’ve deployed your website using Heroku and that you use a CSS library like Bootstrap. I will take you through the steps to get it to work!</p>\r\n\r\n<h4>Setting up the Database</h4>\r\n\r\n<u>Step 1: Generate a Migration</u>\r\n<p>Run <code>bundle exec rails generate migration CreateContacts</code> in your Terminal.<p>\r\n\r\n<u>Step 2: Update your Migration File</u>\r\n<p>Under db/migrate you’ll see a new file similar to [number]_create_contacts.rb. Assuming you want the name, email, and comments from the person who contacts you, you should make this new file look like this:</p>\r\n\r\n<pre><code>class CreateContacts < ActiveRecord::Migration\r\n  def change\r\n    create_table :contacts do |t|\r\n      t.string :name\r\n      t.string :email\r\n      t.text :comments\r\n      \r\n      t.timestamps\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\n<u>Step 3: Run the Migration</u>\r\n<p>In your terminal: <code>bundle exec rake db:migrate</code></p>\r\n\r\n<u>Step 4: Create and modify a new Model File</u>\r\n<p> Create a contact.rb file under app/models folder and add this code to file:\r\n<code>class Contact < ActiveRecord::Base\r\nend</code></p>\r\n\r\n<u>Step 5: Create and modify a Controller</u>\r\n<p>Create a contacts_controller.rb file under app/controllers and add:</p>\r\n<pre><code>class ContactsController < ApplicationController\r\n  def new\r\n    @contact = Contact.new\r\n  end\r\n  def create\r\n  end\r\nend</code></pre>\r\n\r\n<p>On a quick note, controller file names are always plural whereas model file names are singular.</p>\r\n\r\n<h4>Enabling Routes</h4>\r\n\r\n<u>Step 6: Create Routes</u>\r\n<p>Add the following code to your routes.rb file:</p>\r\n<code>resources :contacts</code>\r\n<p>When you run <code>bundle exec rake routes</code> in your Terminal, you’ll see we have many URLs that we can now point to.</p>\r\n\r\n<h4>Creating Views</h4>\r\n\r\n<u>Step 7: Create Contacts Folder and File</u>\r\n<p>Under app/views, create a new contacts folder. In here, create a new.html.erb file. Add the following code to this newly generated file (this HTML assumes you have Bootstrap installed):</p>\r\n<pre><code><xmp><div class=\"col-md-4 col-md-offset-4\">\r\n  <div class=\"well\">\r\n    <%= form_for @contact do |f| %>\r\n    <div class=\"form-group\">\r\n      <%= f.label :name %>\r\n      <%= f.text_field :name, class: 'form-control' %>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <%= f.label :email %>\r\n      <%= f.email_field :email, class: 'form-control' %>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <%= f.label :comments %>\r\n      <%= f.text_area :comments, class: 'form-control' %>\r\n     </div>\r\n      <%= f.submit 'Submit', class: 'btn btn-default' %>\r\n    <% end %>\r\n  </div>\r\n</div></xmp></code></pre>\r\n\r\n<u>Step 8: Add a Link to your View</u>\r\n<p>You could add something like <code><%= link_to \"Contact Us\", new_contact_path %></code> to your nav bar so there is a way to get to the contact form.</p>\r\n\r\n<u>Step 9: Update your contacts_controller</u>\r\n<p>Replace <pre><code> def create . . . end </code></pre> with the following code:</p>\r\n<pre><code>def create\r\n  @contact = Contact.new(contact_params)\r\n    \r\n    if @contact.save\r\n      redirect_to new_contact_path, notice: \"Message sent.\"\r\n    else\r\n      redirect_to new_contact_path, notice: \"Error occured.\"\r\n    end\r\n    \r\nend\r\n  \r\n  private\r\n    def contact_params\r\n      # \"white listing\" these parameters\r\n      params.require(:contact).permit(:name, :email, :comments)\r\n    end</code></pre>\r\n\r\n<h4>Flash Messages</h4>\r\n\r\n<u>Step 10: Enable Flash Messages (Optional)</u>\r\n<p>If you are using Bootstrap, add the following to your application.html.er file:</p>\r\n<pre><code><% flash.each do |key, value| %>\r\n  <%= content_tag :div, value, class: \"alert alert-\#{key}\" %>\r\n<% end %></code></pre>\r\n\r\n<p>In your contacts_controller, replace <pre><code> if @contact.save . . . else … end </code></pre> with the following code:</p>\r\n<pre><code>if @contact.save\r\n      flash[:success] = 'Message sent.'\r\n      redirect_to new_contact_path\r\n    else\r\n      flash[:danger] = 'Error occured, message has not been sent.'\r\n      redirect_to new_contact_path\r\n    end</code></pre>\r\n\r\n<h4>Form Validations</h4>\r\n\r\n<u>Step 11: Add Form Validations (Optional)</u>\r\n<p>If you want to be sure that the person who tries to contact you has not left any fields blank, you can add validations to your contact.rb file in models. You can do something like this:</p>\r\n<pre><code>validates :name, presence: true\r\nvalidates :email, presence: true\r\nvalidates :comments, presence: true</code></pre>\r\n\r\n<h4>Action Mailer</h4>\r\n\r\n<u>Step 12: Add an Action Mailer </u>\r\n<p>Under app/mailers, create a file called contact_mailer.rb. In this file, add the following code:</p>\r\n<pre><code>class ContactMailer < ActionMailer::Base\r\n  default to: ‘type here the email address you want to have as your inbox'\r\n  \r\n  def contact_email(name, email, comments)\r\n    @name = name\r\n    @email = email\r\n    @comments = comments\r\n    \r\n    mail(from: email, subject: 'Contact Form Message')\r\n  end\r\nend</code></pre>\r\n\r\n<u>Step 13: Create Action Mailer View</u>\r\n\r\n<p>Under views, add a folder called contact_mailer, and create a new file contact_email.html.er in it. We need this to set up the layout for the email you’ll be receiving. Add the following code (or something that looks way more awesome) to the file:</p>\r\n<pre><code><xmp>\r\n<html>\r\n  <head>\r\n  </head>\r\n  <body>\r\n    <p>You have received a message from the site's contact form, from <%= \"\#{ @name }, \#{ @email }.\" %></p>\r\n    <p><%= @comments %></p>\r\n  </body>\r\n</html></xmp></code></pre>\r\n\r\n<u>Step 14: Update your Contacts Controller</u>\r\n<p>Under <code>if @contact.save</code> in contacts_controller.rb, add the following code:</p>\r\n<pre><code>name = params[:contact][:name]\r\nemail = params[:contact][:email]\r\ncomments = params[:contact][:comments]\r\nContactMailer.contact_email(name, email, comments).deliver</code></pre>\r\n\r\n<h4>Let’s set up Sendgrid!</h4>\r\n<u>Step 15: Now integrate Sendgrid</u>\r\n<p>I assume you have already deployed your website using Heroku. In your Terminal, run the following commands: <code>heroku domains</code> and then <code>heroku addons:add sendgrid:starter</code> After having done this, you might have to confirm your email with Sendgrid.</p>\r\n\r\n<u>Step 16: Add Variables in your config/environment.rb</u>\r\n<p>Add the following code to the bottom of the file:<p>\r\n<pre><code>ActionMailer::Base.smtp_settings = {\r\n  :address => 'smtp.sendgrid.net',\r\n  :port => '587',\r\n  :authentication => :plain,\r\n  :user_name => ENV['SENDGRID_USERNAME'],\r\n  :password => ENV['SENDGRID_PASSWORD'],\r\n  :domain => 'heroku.com',\r\n  :enable_startstls_auto => true\r\n}</code></pre>\r\n\r\n<u>Step 17:  Update your Environment Variables!</u>\r\n<p>Go to your environment variables in .bashrc that you can find by ensuring you can see your ‘hidden files’ and ‘home in favorites’. Now add the following lines at the very bottom of .bashrc.\r\n\r\n<pre><code>export SENDGRID_USERNAME= add here your Heroku username\r\nexport SENDGRID_PASSWORD= add here your Heroku password</code></pre></p>\r\n\r\n<u>Final step!</u>\r\n<p>Don't forget to push your code to Heroku and run <pre><code>heroku run rake db:migrate</code></pre> in your Terminal! </p>\r\n\r\n<h4>Now you should be able to receive mail!</h4>",
  topic: "Ruby on Rails",
  created_at: "2016-05-04"
)
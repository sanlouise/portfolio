Blog.create!(
  title: "Ternary Conditions",
  body: "<p>It is possible to write a simple condition like the one below. In this post, I will go over ways to accomplish the exact same in a shorter and very readable manner.</p>\r\n\r\n<code><pre>var isGirl = true;\r\nvar toy;\r\n\r\nif(isGirl) {\r\n    toy = “Barbie”;\r\n} else {\r\n    toy = “Action Man”;\r\n}</pre></code>\r\n\r\n<p>See how we just wrote two blocks of code? We can do this in a more concise manner.</p>\r\n\r\n<code><pre>var toy = isGirl ? “Barbie” : “Action Man”;</pre></code>\r\n\r\n<p>Above, we accomplish the exact same as we did before. We write the condition, a questionmark, the result if <code>true</code>, and lastly the result if <code>false</code>. The results is then assigned to our <code>weapon</code> variable.</p>\r\n\r\n<h5 class=“center”>Ternaries in Concatenation</h5>\r\n<p>We can do the following:</p>\r\n<code><pre>console.log(“Type of toy: “ + (isGirl ? “Barbie” : “Action Man”));</pre></code>\r\n\r\n<p>Note, we had to write this with parentheses because of the ‘+’. It immediately evaluates a variable and adds it to a string, the condition would never have been checked.</p>\r\n\r\n<h5 class=“center”>Compound Ternary Conditions</h5>\r\n\r\n<p>We can add a condition. Let’s only assign a Barbie doll to a girl if she is also “girly”. If she is not, she will be assigned an Action Man figure, like we did below:</p>\r\n\r\n<code><pre>var isGirl = true;\r\nvar isGirly = false;\r\n\r\nconsole.log(“Type of toy: “ + (isGirl && isGirly ? “Barbie” : “Action Man”));</pre></code>\r\n\r\n<h5 class=“center”>Action Taking Ternaries</h5>\r\n<p>Besides values, we can also return actions with ternaries. Look at this example:</p>\r\n\r\n<code><pre>var isGirl = true;\r\nvar isGirly = false;\r\n\r\nisGirl && isGirly ? alert(“She gets a Barbie!”) : alert(“She gets an Action Man!”);</pre></code>\r\n\r\n<h5 class=“center”>Picking Functions With Ternaries</h5>\r\n\r\n<p>We can also pass immediately-invoked functions to ternaries, like so:</p>\r\n<code><pre>var isGirl = true;\r\nvar isGirly = false;\r\n\r\nisGirl && isGirly ? function() {\r\n                                alert(“She gets a Barbie!”);\r\n                                console.log(“Her toy is a Barbie.”);\r\n                           }()\r\n                           : \r\n                           function() {\r\n                              alert(“She gets an Action Man!”);\r\n                              console.log(“Her toy is an Action Man.”);\r\n                          }();</pre></code>\r\n\r\n<p>We added the parentheses after the functions to immediately call them.</p>\r\n\r\n<h5 class=“center”>Multiple Actions in Ternaries</h5>\r\n\r\n<p>We can have multiple statements executed depending on each result option:</p>\r\n\r\n<code><pre>var isGirl = true;\r\nvar isGirly = false;\r\nvar playHouse;\r\nvar playVehicle;\r\n\r\nisGirl && isGirly ? (playHouse = “Castle”, vehicle = “Horse”)\r\n                          :\r\n                          (playHouse = “Bunker”, vehicle = “Tank”);\r\n\r\nconsole.log(“Current toy: “ + toy + “\\nCurrent play vehicle: “ + vehicle);</pre></code>\r\n\r\n<h5 class=“center”>Nested Ternaries</h5>\r\n\r\n<p>Ternaries can hold other ternaries within their responses. Often this is not the greatest idea though in terms of code legibility. This is an example of a nested ternary:</p>\r\n\r\n<code><pre>var isGirl = true;\r\nvar isGirly = false;\r\nvar isNewestEdition = true;\r\nvar playHouse;\r\nvar playVehicle;\r\n\r\nisGirl && isGirly ? (playHouse = “Castle”, vehicle = “Horse”)\r\n                          :\r\n                          isNewestEdition ? (playHouse = “Launch Site”, vehicle = “Rocket”)\r\n                                                        :\r\n                                                        (playHouse = “Bunker”, vehicle = “Tank”);</pre></code>\r\n\r\n<p><i>This post was inspired by the ‘Javascript Best Practices’ course on Code School.</i></p>",
  topic: "JavaScript",
  created_at: "2016-07-03"
)
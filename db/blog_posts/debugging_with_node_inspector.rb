user = User.first

user.blogs.create!(
  title: "Debugging With Node Inspector",
  body: "<h4 class=“center>Traditional Debugging</h4>\r\n\r\n<p>You might be familiar with the super useful traditional Javascript debugger that you can run from your terminal. Consider this code that is stored in the following directory, ./features/debugger.js.</p>\r\n\r\n<code><pre>var name = ‘Sandra’;\r\nvar age = 23;\r\n\r\ndebugger;</pre></code>\r\n\r\n<p>The <code>debugger;</code> keyword lets our program know to stop executing. In order to run our program and to let the debugger kick in, we need to go to the terminal and run this code: <code>node debug ./features/debugger.js</code>. I won’t go much into the details on how to debug this way, we have another awesome tool to our disposal that we can run with a UI - arguably much more enjoyable than debugging from your terminal. </p>\r\n\r\n<h4 class=“center>Node Inspector</h4>\r\n\r\n<p>After navigating to the right folder in your terminal, run <code>sudo npm install -g node-inspector</code>. If you are not on a Mac, just get rid of the <code>sudo</code> part. From here, we’ll use Node Inspector instead of the console debugger.</p>\r\n\r\n<p>After installing Node Inspector, run <code>node-debug ./features/debugger.js</code> (specify wherever you have your code stored) in your terminal. This will open up a new browser window (or show you a link which to navigate to) so that you can debug your application from there. If you’ve worked with Chrome Developer Tools before, the environment will look familiar.</p>\r\n\r\n<p>You can use the escape key to open up a console without hiding your source file. Anything you’d want to to with Javascript you can do right there, such as working with existing functions within your file.</p>\r\n\r\n<h4 class=“center>Node Inspector Using ExpressJS</h4>\r\n\r\n<p>Let’s install ExpressJS and Bodyparser. Run <code>npm install express body-parser --save</code>. Now, let’s head back into debugger.js and create a simple server with ExpressJS.</p>\r\n\r\n<code><pre>var express = require('express');\r\nvar bodyParser = require('body-parser');\r\nvar app = express();\r\n\r\napp.use(bodyParser.json());\r\n\r\napp.post('/', function (req, res) {\r\n    debugger;\r\n    res.json({\r\n        status: 'OK',\r\n        data: req.body\r\n    });\r\n});\r\n\r\napp.listen(3000);\r\n});</pre></code>\r\n\r\n<p>You can put ‘debugger’ as many times and anywhere in your program. Execution will always stop at each of these points.\r\n\r\n<h5 class=“center>Testing With Postman</h5>\r\n\r\n<p>Once your file looks like this, run <code>node-debug ./features/debugger.js</code>. You should see your new code in your debugger environment. We can now test our POST request. I’ll be using Postman to send out these test request, Postman is one of my favorite development tools.</p>\r\n\r\n<p>Make a POST request to localhost:3000/, and make sure to set the (raw) body data to JSON(application/json). Make the body look like this, or something completely different:</p>\r\n<code><pre>{\r\n    “name”: “Sandra”\r\n}</pre></code>\r\n\r\n<p>When you send off this request, you should see a notification pop us telling that your debugger was paused. You should also see that Postman does not return a response. At this point, you can access any property you want via the console. When you type <code>req.body</code>, you will see that it is an Object which has a name property set to Sandra. This is a very useful tool to find out what data is coming into your server.</p>\r\n\r\n<p>If you click the ‘play’ button now, the rest of the code will run and you should see a JSON response in Postman.</p>",
  topic: "JavaScript",
  created_at: "2016-06-15"
)
user = User.first

user.blogs.create!(
  title: "Functional Classes",
  body: "<section class=\"blog-font blog-post\">\r\n<p>A functional class is the simplest possible implementation of a class and \r\ncan be used to produce fleets of similar objects that all conform to a somewhat \r\nsimilar interface.</p>\r\n\r\n<h4>Decorators vs. Classes</h4>\r\n  \r\n<p>The main difference between a Decorator function and a class, is that a class \r\nbuilds the object it is going to use whereas a Decorator accepts that object as \r\nan input. This post will refer to and build upon the methods built in <a href=\"http://www.sandrahallie.com/blogs/13\">my former \r\nblog post dedicated to the Object Decorator Pattern</a>.</p>\r\n \r\n<p>\r\nTo build a functional class, we’ll need to rework our code a bit by moving the \r\nobject creation into the tigerProps function and remove the obj parameter so that \r\nwe can declare a local variable. Also, as of convention, we’ll need to capitalize \r\nall class names. Our library.js now looks as follows:\r\n</p>\r\n  \r\n<pre><code>var Tiger = function(obj, loc) {\r\n  obj.loc = loc;\r\n  obj.move = function() {\r\n    obj.loc++;\r\n  };\r\n  return obj;\r\n};\r\n</code></pre>\r\n\r\n<p>And run.js:</p>\r\n\r\n<pre><code>var bobo = Tiger(2);\r\nbobo.move();\r\nvar nola = Tiger(7);\r\nnola.move();\r\n</code></pre>\r\n\r\n<p>Functions within a class that produce a fleet of objects are called constructor functions. \r\nTheir job is to construct the objects that will qualify as members of the class. The objects \r\nthat are returned from constructor functions are called instances, and the process of creating \r\na new object from a constructor function is called instantiating. </p>\r\n\r\n<p>You might have noticed that every time Tiger is called, the move function runs as well - resulting \r\nin duplicated methods. Instead, we could use one function object that could be shared with all \r\nTiger objects. We can push the move function outside of the class so it will only be referred to \r\nonce, and thus only build one such function object (we have now a functional shared pattern!).</p>\r\n  \r\n<pre><code>var Tiger = function(loc) {\r\n  obj.loc = {loc: loc};\r\n  obj.move = move;\r\n  return obj;\r\n};\r\n\r\nvar move = function() {\r\n  this.loc++;\r\n};\r\n</code></pre>\r\n\r\n<p>Note that I wrote this.loc++ instead of obj.loc++, because we moved the function out of the \r\nlocal scope of the Tiger class. Hopefully it is clear that ‘this’ refers to ‘the bobo' or ‘nola’ \r\nvariables.</p>\r\n\r\n<p>It is problematic, however, that we now refer to the move method in two places. For instance, if we \r\nwere to add methods to make the tigers jump or run our code would look something like this:</p>\r\n  \r\n<pre><code>var Tiger = function(loc) {\r\n  obj.loc = {loc: loc};\r\n  obj.move = move;\r\n  obj.jump = jump\r\n  obj.run = run\r\n  return obj;\r\n};\r\n\r\nvar move = function() {\r\n  this.loc++;\r\n};\r\n\r\nvar jump = function() { … };\r\nvar run = function() { … };\r\n</code></pre>\r\n\r\n<p>As you see, the functions are called twice: in the global scope and also in the Tiger class. We can avoid this duplication. For the sake of simplicity, I have removed the jump and run functions here. </p>\r\n\r\n<pre><code>var Tiger = function(loc) {\r\n  obj.loc = {loc: loc};\r\n  extend(obj, methods);\r\n  return obj;\r\n};\r\nvar methods: {\r\n  move : function() {\r\n    this.loc++;\r\n  }\r\n};\r\n\r\n</code></pre>\r\n\r\n<p>This is much easier! Now, if we edit code in our Tiger.methods object, it will automatically become \r\nan available property to our Tiger class. Note, instead of naming it a global variable like ‘methods’, \r\nit is good practice to clearly name the methods object so it is clear what it belongs to.</p>\r\n  \r\n<p>My <a href=\"http://www.sandrahallie.com/blogs/3\">next blog post</a> will iterate on improving this piece of code!</p>\r\n\r\n<i>This post was inspired by the course on Object-Oriented Javascript by Udacity and Hack Reactor.</i>\r\n\r\n</section>",
  topic: "JavaScript",
  created_at: "2016-03-23"
)
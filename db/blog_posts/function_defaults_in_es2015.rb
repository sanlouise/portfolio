Blog.create!(
  title: "Function Defaults in ES2015",
  body: "<h4 class=“center”>Function Defaults</h4>\r\n\r\n<p>Assume we got this piece of code:</p>\r\n\r\n<code><pre>function loadUsers(userNames) {\r\n    let namesLength = userNames.length;\r\n    console.log(namesLength);\r\n}</pre></code>\r\n\r\n<p>Now, if we run <code>loadUsers();</code>, we will get a TypeError because the length cannot be determined of an undefined property. We need to check if properties are passed into our function. It is very common for developers to first check for the presence of arguments in this manner:</p>\r\n\r\n<code><pre>function loadUsers(userNames) {\r\n    let names = typeof userNames !== ‘undefined’ ? userNames : [];\r\n    let namesLength =names.length;\r\n    console.log(namesLength);\r\n}</pre></code>\r\n\r\n<p>This is not an ideal solution  if we want to check multiple arguments.</p>\r\n\r\n<h5 class=“center”>A Better Way</h5>\r\n\r\n<p>With ES2015, it is good practice to move default values to the function signature, like so:</p>\r\n\r\n<code><pre>function loadUsers(userNames = []) {\r\n    let namesLength = userNames.length;\r\n    console.log(namesLength);\r\n}</pre></code>\r\n\r\n<p>Doing it this way, the empty array is used as default value when no argument is passed into our function. So instead of breaking our program, <code>loadUsers();</code> will now return 0.\r\n\r\n<h4 class=“center”>Options Objects</h4>\r\n\r\n<p>An options object is a Javascript object that contains named parameters that are passed into a function. Generally, it is a good idea to use options objects when a function has two or more arguments. It is also good practice to start using object options when you are using one argument now, but when there is a chance you want to use more arguments later on.</p>\r\n\r\n<p>Let’s look at an example. The jQuery.ajax function uses an options object:</p>\r\n\r\n<code><pre>$.ajax({\r\n    url:  \"http://date.jsontest.com/\",\r\n    success: function (data) {\r\n        console.log(data);\r\n    },\r\n    cache: true,\r\n    timeout: 500\r\n});</pre></code>\r\n\r\n<p>This code would be much less readable had we left out the options object.</p>\r\n\r\n<p>We can use named parameters for optional settings. Named parameters make it easy to understand how to invoke a function. Consider this function that contains a three options object with three properties:</p>\r\n\r\n<code><pre>setPageContent(“Some blog content”, {\r\n    trending: false,\r\n    maximum: 200, \r\n    writer: “Sandra”\r\n});</pre></code>\r\n\r\n<p>We can use an options object to call this function:</p>\r\n\r\n<code><pre>function setPageContent(name, options = {}) {\r\n    let trending = options.trending;\r\n    let maximum = options.maximum;\r\n    let writer = options.writer;\r\n};</pre></code>\r\n\r\n<p>Although the code should run this way, it can be hard to figure out which options function actually expects. Also, you see the boilerplate code? For the sake of code readability, this is not our ideal solution.</p>\r\n\r\n<h5 class=“center”>Named Parameters</h5>\r\n\r\n<p>A solution to the problem above is the use of named parameters. Looking at the function’s signature, it is easy to figure out what arguments our options parameter accepts.</p>\r\n\r\n<code><pre>function setPageContent(title, { trending, maximum, writer}) {\r\n    console.log(“Title: “, title);\r\n    console.log(“Trending: “ trending);\r\n    console.log(“Maximum: “, maximum);\r\n    console.log(“Writer: “, writer);\r\n}</pre></code>\r\n\r\n<p>This is much clearer and concise! The code stays the exact same from the caller’s perspective. So just like we had before, we can call our setPageContent like this:</p>\r\n\r\n<code><pre>setPageContent(“Some blog content”, {\r\n    trending: false,\r\n    maximum: 200, \r\n    writer: “Sandra”\r\n});</pre></code>\r\n\r\n<p>Our code will also run if we don’t pass all named arguments. For instance, it is completely fine to only include the ‘writer’ option and omit the other ones. It will just print out undefined for the values we did not assign.</p>\r\n\r\n<h5 class=“center”>Default for Named Parameters</h5>\r\n<p>Although we can omit some named arguments, we cannot leave them out completely. If we were to run <code>setPageContent(“Some blog content”);</code> we run into an error. ES2015 comes with a nice workaround, setting a default value for the options so we can omit the entire options argument when invoking a function. It looks like this:</p>\r\n<code><pre>function setPageContent(title, {trending, maximum, writer} = {}) {\r\n    …\r\n</pre></code>\r\n\r\n<p>Now, if we run <code>setPageContent(“Some blog content”);</code>, we won’t run into an error anymore.</p>\r\n\r\n<p><i>This post was inspired by the ES2015 course on CodeSchool.</i></p>\r\n\r\n\r\n<h5 class=“center”>Further Reading</h5>\r\n<li>http://www.codereadability.com/what-are-javascript-options-objects/</li>\r\n\r\n",
  topic: "Javascript",
  created_at: "2016-06-22"
)
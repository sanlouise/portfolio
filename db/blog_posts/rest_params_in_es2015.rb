user = User.first

user.blogs.create!(
  title: "Rest Params in ES2015",
  body: "<p>In this post, we’ll try to add categories to blog posts. We want to create a function that not only sets the target element displaying these categories, but that also allows us to easily pass in a different number of arguments without breaking our code. Functions that accept any number of arguments are called ‘variadic functions’. </p>\r\n\r\n<h4 class=“center”>Before ES2015</h4>\r\n\r\n<p>Let’s look at a way to create a function that allows us to display categories.</p>\r\n\r\n<code><pre>function displayCategories(){\r\n    for(let i in arguments){\r\n        let category = arguments[i];\r\n        _addToBlog(category);\r\n    }\r\n}</pre></code>\r\n\r\n<p>Here, ‘arguments’ is a built-it object that looks like an Array. It corresponds to the arguments given to a function. Passing arguments like this is not ideal and can quite easily break our code. If we change our function signature, our code will break. Although we can pass our desired categories to the function, we cannot add a targetElement. Look at this:</p>\r\n\r\n<code><pre>function displayCategories(targetElement){\r\n\r\n    let target = _findElement(targetElement);\r\n\r\n    for(let i in arguments){\r\n        let category = arguments[i];\r\n        _addToBlog(category);\r\n    }\r\n}</pre></code>\r\n\r\n<p>Our loop is broken because the first argument of the function is not a category. Not ideal!</p>\r\n\r\n<h4 class=“center”>Solution: Rest Parameters</h4>\r\n<p>The new rest parameter syntax that was introduced with ES2015 allows developers to represent an unlimited number or arguments as an Array. This syntax allows for code that is less likely to break. Note: the rest parameter should always be passed last into teh function signature!</p>\r\n\r\n<code><pre>function displayCategories(…categories){\r\n    for(let i in categories_{\r\n        let category = category[i];\r\n        _addToBlog(category);\r\n    }\r\n}</pre></code>\r\n\r\n<p>The three dots make ‘categories’ a rest parameter, grouping all arguments passed into the function into an Array. We can now add a target element where to display the categories without breaking our code, like so:</p>\r\n\r\n<code><pre>function displayCategories(targetElement, …categories){\r\n    let target = _findElement(targetElement);\r\n\r\n    for(let i in categories){\r\n        let category = category[i];\r\n        _addToBlog(target, category);\r\n    }\r\n}</pre></code>\r\n\r\n<p>The loop is not affected by the extra argument in the function signature. Awesome!</p>\r\n\r\n<h4 class=“center”>Spread Operator - Retrieving Individual Elements</h4>\r\n\r\n<p>To retrieve individual elements from a rest parameter, we can make use of the spread operator: <code>(…)</code>. The spread operator looks the same as a rest parameter but is used in function invocations rather than in function definitions.</p>\r\n\r\n<code><pre>getRequest(“/subjects/6/categories, function(data){\r\n    let categories = data.categories;\r\n    displayCategories(…categories);\r\n})</pre></code>\r\n\r\n<p>Here, <code>displayCategories</code> is invoked with individual arguments instead of an Array. In fact, <code>(…categories)</code> is the same as <code>(category, category, category)</code> (or how many categories we want to pass in).</p>\r\n\r\n<p><i>This post was inspired by ‘The Shape of Javascript To Come’ by Code School.</i></p>\r\n",
  topic: "JavaScript",
  created_at: "2016-06-22"
)
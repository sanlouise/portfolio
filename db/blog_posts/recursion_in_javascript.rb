Blog.create!(
  title: "Recursion in Javascript",
  body: "<p>In my quest to becoming a programmer, I realized I needed to understand at least the basics of recursion. A recursive function is a function that calls itself until it stops doing so. I found <a href=//www.youtube.com/watch?v=k7-N8R0-KY4>this wonderful tutorial </a> I believe everyone who wants to know about recursion should watch. Most of this post will be based on what I learned from that video.</p>\r\n\r\n<p>This is probably the most basic a recursive function can get. Note the ES2015 syntax!</p>\r\n\r\n<code><pre>let CountDown = (num) => {\r\n    console.log(num)\r\n    countDown(num-1)\r\n}\r\n\r\ncountDown(20);</pre></code>\r\n\r\n<p>Because we never told our code when to stop executing, we run into a RangeError: ‘Maximum call stack size exceeded’. The function stack is the stack of function calls that our code has made. Up until ES2015, Javascript has had an upper limit for call stacks. Now with ES2015 this limit has been removed, getting rid off one of the biggest limitations of doing functional programming with Javascript.</p>\r\n\r\n\r\n<code><pre>let CountDown = (num) => {\r\n    if (num === 0) return;\r\n    console.log(num)\r\n    countDown(num-1)\r\n}\r\n\r\ncountDown(20);</pre></code>\r\n\r\n<p>Now our program knows to stop counting down at 0, and because of <code>(n-1)</code> our lastly returned number is 1.</p>\r\n\r\n<h5 class=“center”>Recursion over Iteration</h5>\r\n<p>You might think to yourself, “I could have accomplished the same using a simple loop!”. In fact, every time you use a loop, you can use recursion instead. However, recursive functions can do things loops can’t do.</p>\r\n\r\n<p>Let’s try to make tree similar to a pop-up menu like the ones you are most likely familiar with on traditional Windows computers. You click on the menu button, allowing you to hover over different items, and per item you can choose various options. Hopefully you </p>\r\n\r\n<code><pre>let categories = [\r\n  {id: 'animals', 'parent': null },\r\n  {id: 'mammals', 'parent': 'animals' },\r\n  {id: 'horses', 'parent': 'mammals' },\r\n  {id: 'dogs', 'parent': 'mammals' },\r\n  {id: 'jack russell', 'parent': 'dogs' },\r\n  {id: 'rottweiler', 'parent': 'dogs' },\r\n  {id: 'appaloosa', 'parent': 'horses' },\r\n  {id: 'shetland', 'parent': 'horses' }\r\n]</pre></code>\r\n\r\n<h5 class=“center”>Desired Output</h5>\r\n\r\n<p>With our goal in mind, we are trying to get an output that looks like this:</p>\r\n\r\n<code><pre>{\r\n  animals: {\r\n    mammals: {\r\n        horses : {\r\n          ‘appaloosa’: null\r\n          ‘shetland’: null\r\n        },\r\n        dogs: {\r\n          ‘jack russell’: null\r\n          ‘rottweiler’: null\r\n        }\r\n     }\r\n   }\r\n}</pre></code>\r\n\r\n<h5 class=“center”>Creating a Recursive Function</h5>\r\n\r\n<p>We can accomplish this using the following function:</p>\r\n\r\n<code><pre>let makeTree = (categories, parent) => {\r\n    let node = {}\r\n    categories\r\n        .filter(c => c.parent === parent)\r\n        .forEach(c =>\r\n            node[c.id] = makeTree(categories, c.id))\r\n    return node;\r\n}</pre></code>\r\n\r\n<p>Although this function might seem quite intimidating at first, it’s quite simple when we break it down.</p>\r\n\r\n<p>We filter our categories array, first looking for the root element. The root element has no parent, so passing the function <code>null</code> for parent will return only the top element, ‘animals’. All other elements will be filtered out at this point because they all do have a parent.</p>\r\n\r\n<p>Parts of a tree are called nodes. For each category, we’ll take the id (in the first loop ‘animals’) and assign it to the node. This node will now get a subtree, which we can get using recursion. This new subtree will be passed the same array, however its nodes will have an ‘id’ as parent instead of null. This results in a node that has ‘animals’ as its parent element. When out <code>makeTree</code> function is called again, two new nodes are created with ‘mammals’ as their parent. This goes on until the leafs of the tree (the last nodes) are reached.</p>\r\n\r\n\r\n<h5 class=“center”>Log Output</h5>\r\n<p>To ensure our output is readable, use the <code>JSON.stringify</code> method. We pass our <code>makeTree</code> function our array, and to find our root, <code>null</code> as teh parent of our first element. Then we pass <code>null</code> again for </p>\r\n\r\n<code><pre>console.log(\r\n    JSON.stringify(\r\n        makeTree(categories, null), \r\n        null, 2)\r\n)</pre></code>\r\n\r\n<p>Now we have the expected result! Awesome. We could have accomplished the same using nested for-loops, however that would have made it much harder to keep track of each element. Our code is very readable now.</p>",
  topic: "JavaScript",
  created_at: "2016-07-04"
)
Blog.create!(
  title: "Object Functionality",
  body: "<p>Consider we have a list of students.</p>\r\n\r\n<code><pre>var students = {\r\n    Anna: { country: “the Netherlands”, major: “Business”, grade: 10 },\r\n    Jenny: { country: “USA”, major: “Literature”, grade: 8 },\r\n    Marc: { country: “United Kingdom”, major: “Finance”, grade: 9 },\r\n    Jessica: { country: “Sweden”, major: “Art History”, grade: 5 }\r\n}</pre></code>\r\n\r\n<h5 class=“center”>Adding Properties to Objects</h5>\r\n\r\n<p>We want to add another student to this list. We could do it this way:</p>\r\n\r\n<code><pre>function addStudent( list, name, country, major, grade ) {\r\n    list[name] = {country: country, major: major, grade: grade};\r\n}</pre></code>\r\n\r\n<p>It would be better, however, if this function belonged to the list of students instead of our whole program. Knowing that object properties can also be functions (here often called methods), we can accomplish that in this way:</p>\r\n\r\n<code><pre>var students = {\r\n    Anna: { country: “the Netherlands”, major: “Business”, grade: 10 },\r\n    Jenny: { country: “USA”, major: “Literature”, grade: 8 },\r\n    Marc: { country: “United Kingdom”, major: “Finance”, grade: 9 },\r\n    Jessica: { country: “Sweden”, major: “Art History”, grade: 5 },\r\n    addStudent: function ( name, country, major, grade ) {\r\n        this[name] = {country: country, major: major, grade: grade};\r\n    }\r\n\r\n}</pre></code>\r\n\r\n<p>Note that our <code>list</code> parameter has disappeared now that the function belongs directly to the list. When our <code>addStudent</code> function is called with <code>this</code>, it signals our students list to make a new property called <code>name</code> and then assign it to a new object. Now <code>addStudent</code> is available as a property on the students object. Let’s add a student!</p>\r\n\r\n<code><pre>students.addStudent(“Bob”, “Germany”, “Law”, 7);</pre></code>\r\n\r\n<p>Now Bob is added to students!</p>\r\n\r\n<h5 class=“center”>Deleting Properties from Objects</h5>\r\n\r\n<p>Using dot notation, we can create a function on the fly that takes out a student from our list. With the following code, we only need the name of the property.</p>\r\n\r\n<code><pre>students.takeOut = function ( name ) {\r\n    var hold = this[name];\r\n    delete this[name];\r\n    return hold;\r\n};</pre></code>\r\n\r\n<p>We create and later return a <code>hold</code> variable to hold on to the object that will be removed. Doing this allows us to keep a reference to the object once it is deleted from our students list. Let’s give this a try!</p>\r\n\r\n<code><pre>var studentOutOfList = students.takeOut(“Jenny”);</pre></code>\r\n\r\n<p>Jenny is deleted from our students list, and Jenny gets established inside the <code>studentsOutOfList</code> variable. We can prove this by logging <code>studentOutOfList</code>, which returns: <code>Object: { country: “USA”, major: “Literature”, grade: 8 }</code>. One thing that is suboptimal here, is that we have lost Jenny’s name! We can work around that problem. Update our function like this:</p>\r\n\r\n<code><pre>students.takeOut = function ( name ) {\r\n    this[name].name = name;\r\n    var hold = this[name];\r\n    delete this[name];\r\n    return hold;\r\n};</pre></code>\r\n\r\n<p>Let’s look at the second line of code here. First, <code>this[name]</code> finds the right object. Then after the dot, a brand new property is created in the object we want to remove. It is not the function’s parameter, it really is a new property. Lastly, the third <code>name</code> assigns the original property <code>name</code> to the newly created <code>name</code> property in the object that we remove.</p>\r\n\r\n<p>Now, if we run:</p>\r\n\r\n<code><pre>var studentOutOfList = students.takeOut(“Jenny”);\r\nconsole.log(studentOutOfList);</pre></code>\r\n\r\n<p>We see <code>Object: { country: “USA”, major: “Literature”, grade: 8, name: “Jenny” }</code>, awesome!</p>\r\n",
  topic: "JavaScript",
  created_at: "2016-04-30"
)
Blog.create!(
  title: "Sending and Receiving Data with Socket.io (2/3)",
  body: "<p>After you’ve set up your server like I showed in <a href=\"http://www.sandrahallie.com/blogs/13\">my latest post</a>, it’s pretty easy to set up a very basic data exchange between client and server.</p>\r\n\r\n<h4 class=“center”>Basic Data Transfer</h4>\r\n\r\n<p>In our server.js file, we are already listening to connection events. Socket.io allows us to listen for many other events. For now, let’s listen to ‘emit’ events - when a user wants to transfer some message or data to a server. Update your server.js file to look like this:\r\n\r\n<code><pre>var PORT = process.env.PORT || 3000;\r\nvar express = require('express');\r\nvar app = express();\r\nvar http = require('http').Server(app);\r\nvar io = require('socket.io')(http);\r\n\r\napp.use(express.static(__dirname + '/public'));\r\n\r\nio.on('connect', function (socket) {\r\n\tconsole.log('User is connected via socket.io!');\r\n\tsocket.emit('message', {\r\n\t\ttext: 'Welcome to Chatty!'\r\n\t});\r\n});\r\n\r\nhttp.listen(PORT, function () {\r\n\tconsole.log('Server started!');\r\n});</pre></code></p>\r\n\r\n<p>Here, <code>socket.emit</code> sends a message to the client with a custom text. To make this available in the console in developer tools on the front-end, we’ll only need to do the following in app.js:\r\n\r\n<code><pre>var socket = io();\r\n\r\nsocket.on('connect', function () {\r\n\tconsole.log('Connected to the socket.io server!');\r\n});\r\n\r\nsocket.on('message', function (message) {\r\n\tconsole.log('New message:');\r\n\tconsole.log(message.text);\r\n})</pre></code></p>\r\n\r\n<p>After the connection with the server is made, our app can make a connection to the client. The client can now request data whenever it wants to, and the server can now tell the client when new information has become available. This is truly awesome! If we were now to make a chat app, we wouldn’t have to refresh our page all the time to retrieve new data.</p>\r\n\r\n<h4 class=“center”>Communication between Browsers</h4>\r\n<p>With socket.io, communication between two browsers can be done with only a few lines of code. We’ll need to emit each message that is received by the server. For instance, if I send a message to the server, I want that message to be sent to you.</p>\r\n\r\n<p> Update your server.js file like this:\r\n\r\n<code><pre>io.on('connect', function (socket) {\r\n\tconsole.log('User is connected via socket.io!');\r\n\r\n\tsocket.on('message', function (message) {\r\n\t\tconsole.log('Your message was received' + message.text);\r\n\t\tsocket.broadcast.emit('message', message);\r\n\t});\r\n\r\n\tsocket.emit('message', {\r\n\t\ttext: 'Welcome to Chatty!'\r\n\t});\r\n});</pre></code></p>\r\n\r\n<p>Now, when new messages come in, we log them to the console and send them to all other browsers that are connected to our app. Note, <code>socket.broadcast.emit</code> sends the message to all clients except for the one that sent it. If you use <code>io.emit</code> it will also be sent to the sender.</p>\r\n\r\n<h5 class=“center”>Check the Connection</h5>\r\n\r\n<p>To see whether our code is set up correctly for browsers to talk to each other, open two windows listening to localhost:3000. Now we need to emit a message from the client to the server. In the console of one of your browsers, type the following:\r\n\r\n<code><pre>socket.emit('message', {\r\n    text: ‘This is a test message!'\r\n});</pre></code></p>\r\n\r\n<p>If all goes well, you should see this message also appear directly in the console of your other browser! In  <a href=\"http://www.sandrahallie.com/blogs/15\">my next post</a> I will work on a very basic interface that goes with our app.</p>\r\n",
  topic: "Javascript",
  created_at: "2016-06-16"
)